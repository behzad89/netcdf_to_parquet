####### USEFUL COMMANDS
# - Get live logs from head node:
# ray exec config.yml 'tail -n 100 -f /tmp/ray/session_latest/logs/monitor*'
# - Set up dashboard:
# ray dashboard config.yml
# - Bring cluster down:
# ray down config.yml
# - Bring cluster up manually:
# ray up config.yml



# An unique identifier for the head node and workers of this cluster.
cluster_name: default

# The maximum number of workers nodes to launch in addition to the head
# node.
max_workers: 16

# The autoscaler will scale up the cluster faster with higher upscaling speed.
# E.g., if the task requires adding more nodes then autoscaler will gradually
# scale up the cluster in chunks of upscaling_speed*currently_running_nodes.
# This number should be > 0.
upscaling_speed: 1.0

# This executes all commands on all nodes in the docker container,
# and opens all the necessary ports to support the Ray cluster.
# Empty string means disabled.
docker: {}
#    image: "rayproject/ray-ml:latest-gpu" # You can change this to latest-cpu if you don't need GPU support and want a faster startup
#    image: rayproject/ray:latest-cpu   # use this one if you don't need ML dependencies, it's faster to pull
#    container_name: "ray_container"
    # If true, pulls latest version of image. Otherwise, `docker run` will only pull the image
    # if no cached version is present.
#    pull_before_run: True
#    run_options:   # Extra options to pass into "docker run"
#        - --ulimit nofile=65536:65536

    # Example of running a GPU head with CPU workers
    # head_image: "rayproject/ray-ml:latest-gpu"
    # Allow Ray to automatically detect GPUs

    # worker_image: "rayproject/ray-ml:latest-cpu"
    # worker_run_options: []

# If a node is idle for this many minutes, it will be removed.
idle_timeout_minutes: 5

# Cloud-provider specific configuration.
provider:
    type: aws
    region: us-east-1
    # Availability zone(s), comma-separated, that nodes may be launched in.
    # Nodes will be launched in the first listed availability zone and will
    # be tried in the subsequent availability zones if launching fails.
    availability_zone: us-east-1a, us-east-1f, us-east-1e
    # Whether to allow node reuse. If set to False, nodes will be terminated
    # instead of stopped.
    cache_stopped_nodes: False # If not present, the default is True. To terminate the cluster when 'ray down config.yml'
    use_internal_ips: False # If True, it would use internal IP to connect to the headnode

# How Ray will authenticate with newly launched nodes.
auth:
    ssh_user: ubuntu
# By default Ray creates a new private keypair, but you can also use your own.
# If you do so, make sure to also set "KeyName" in the head and worker node
# configurations below.
#    ssh_private_key: /path/to/your/key.pem

# Tell the autoscaler the allowed node types and the resources they provide.
# The key is the name of the node type, which is just for debugging purposes.
# The node config specifies the launch config and physical instance type.
available_node_types:
    ray.head.default:
        # The node type's CPU and GPU resources are auto-detected based on AWS instance type.
        # If desired, you can override the autodetected CPU and GPU resources advertised to the autoscaler.
        # You can also set custom resources.
        # For example, to mark a node type as having 1 CPU, 1 GPU, and 5 units of a resource called "custom", set
        # resources: {"CPU": 1, "GPU": 1, "custom": 5}
        # CPU and GPU count set to zero, to ensure the head node isn't used as a worker node
        resources: {"CPU": 0, "GPU": 0}
        # Provider-specific config for this node type, e.g. instance type. By default
        # Ray will auto-configure unspecified fields such as SubnetId and KeyName.
        # For more documentation on available fields, see:
        # http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
        node_config:
            InstanceType: t2.micro  # Could use graviton with the right AMI?
            # ImageId: ami-00db3b68d5961cbb0  # Private AMI with Ray, GDAL, etc.
            # NetworkInterfaces:
            #   - DeviceIndex: 0
            #     AssociatePublicIpAddress: False
            #     SubnetId: subnet-0a7189d96dc6f0590
            #     Groups:
            #       - sg-01da8983c35293230
            # You can provision additional disk space with a conf as follows
            # BlockDeviceMappings:
            #     - DeviceName: /dev/sda1
            #       Ebs:
            #           VolumeSize: 8
            #           VolumeType: gp2
                      # DeleteOnTermination: True
            # Additional options in the boto docs.
    ray.worker.default:
        # The minimum number of worker nodes of this type to launch.
        # This number should be >= 0.
        min_workers: 0
        # The maximum number of worker nodes of this type to launch.
        # This takes precedence over min_workers.
        max_workers: 16
        # The node type's CPU and GPU resources are auto-detected based on AWS instance type.
        # If desired, you can override the autodetected CPU and GPU resources advertised to the autoscaler.
        # You can also set custom resources.
        # For example, to mark a node type as having 1 CPU, 1 GPU, and 5 units of a resource called "custom", set
        # resources: {"CPU": 1, "GPU": 1, "custom": 5}
        resources: {}
        # Provider-specific config for this node type, e.g. instance type. By default
        # Ray will auto-configure unspecified fields such as SubnetId and KeyName.
        # For more documentation on available fields, see:
        # http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
        node_config:
            InstanceType: t2.micro
            # ImageId: ami-00db3b68d5961cbb0  # Private AMI with Ray, GDAL, etc.
            # NetworkInterfaces:
            #   - DeviceIndex: 0
            #     AssociatePublicIpAddress: False
            #     SubnetId: subnet-0a7189d96dc6f0590
            #     Groups:
            #       - sg-01da8983c35293230
            # IamInstanceProfile:
            #   Arn: arn:aws:iam::009172726091:instance-profile/ray-worker-v1
          # You can provision additional disk space with a conf as follows
            # BlockDeviceMappings:
            #   - DeviceName: /dev/sda1
            #     Ebs:
            #       VolumeSize: 8
            #       VolumeType: gp2
                  # DeleteOnTermination: True
            # Run workers on spot by default. Comment this out to use on-demand.
            # NOTE: If relying on spot instances, it is best to specify multiple different instance
            # types to avoid interruption when one instance type is experiencing heightened demand.
            # Demand information can be found at https://aws.amazon.com/ec2/spot/instance-advisor/
            InstanceMarketOptions:
                MarketType: spot
                # Additional options can be found in the boto docs, e.g.
                #   SpotOptions:
                #       MaxPrice: MAX_HOURLY_PRICE
            # Additional options in the boto docs.

# Specify the node type of the head node (as configured above).
head_node_type: ray.head.default

# Files or directories to copy to the head and worker nodes. The format is a
# dictionary from REMOTE_PATH: LOCAL_PATH, e.g.
file_mounts: {
#    "/path1/on/remote/machine": "/path1/on/local/machine",
#    "/path2/on/remote/machine": "/path2/on/local/machine",
}

# Files or directories to copy from the head node to the worker nodes. The format is a
# list of paths. The same path on the head node will be copied to the worker node.
# This behavior is a subset of the file_mounts behavior. In the vast majority of cases
# you should just use file_mounts. Only use this if you know what you're doing!
cluster_synced_files: []

# Whether changes to directories in file_mounts or cluster_synced_files in the head node
# should sync to the worker node continuously
file_mounts_sync_continuously: False

# Patterns for files to exclude when running rsync up or rsync down
rsync_exclude:
    - "**/.git"
    - "**/.git/**"

# Pattern files to use for filtering out files when running rsync up or rsync down. The file is searched for
# in the source directory and recursively through all subdirectories. For example, if .gitignore is provided
# as a value, the behavior will match git's behavior for finding and using .gitignore files.
rsync_filter:
    - ".gitignore"

# List of commands that will be run before `setup_commands`. If docker is
# enabled, these commands will run outside the container and before docker
# is setup.
initialization_commands: []

# List of shell commands to run to set up nodes.
setup_commands: # []
# Below steps included in the AMI
#  - sudo apt update -y
#  - sleep 2
#  - sudo apt-get install -y software-properties-common
#  - sudo apt-get update -y
#  - sudo add-apt-repository ppa:ubuntugis/ppa -y
#  - sudo apt-get update -y
#  - sudo apt install -y gdal-bin libgdal-dev
#  # Ironically, we need to ensure ray is installed on each worker "^_^
#  - sudo -H pip3 install -U pip
 - sudo -H pip3 install -U "ray[default]" boto3
#  - sudo -H pip3 install -U numpy pandas rasterio

# Custom commands that will be run on the head node after common setup.
head_setup_commands: []

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []

# Command to start ray on the head node. You don't need to change this.
head_start_ray_commands:
    - ray stop
    - ray start --head --dashboard-host=0.0.0.0 --port=6379 --object-manager-port=8076 --autoscaling-config=~/ray_bootstrap_config.yaml
# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands:
    - ray stop
    - ray start --address=$RAY_HEAD_IP:6379 --object-manager-port=8076

# --dashboard-host=0.0.0.0 --> It should be added to be able to connect to dashboard via Internet.
# Security Group also should be modified to accept any IP from port 10001 and 8265